//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Front.ProductServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductServiceReference.IProductService")]
    public interface IProductService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetShortProducts", ReplyAction="http://tempuri.org/IProductService/GetShortProductsResponse")]
        Core.Models.ShortProductDTO[] GetShortProducts(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetShortProducts", ReplyAction="http://tempuri.org/IProductService/GetShortProductsResponse")]
        System.Threading.Tasks.Task<Core.Models.ShortProductDTO[]> GetShortProductsAsync(int skip, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetDetailProduct", ReplyAction="http://tempuri.org/IProductService/GetDetailProductResponse")]
        Core.Models.DetailProductDTO GetDetailProduct(int productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetDetailProduct", ReplyAction="http://tempuri.org/IProductService/GetDetailProductResponse")]
        System.Threading.Tasks.Task<Core.Models.DetailProductDTO> GetDetailProductAsync(int productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsCount", ReplyAction="http://tempuri.org/IProductService/GetProductsCountResponse")]
        int GetProductsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsCount", ReplyAction="http://tempuri.org/IProductService/GetProductsCountResponse")]
        System.Threading.Tasks.Task<int> GetProductsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetPhotoThumbnail", ReplyAction="http://tempuri.org/IProductService/GetPhotoThumbnailResponse")]
        byte[] GetPhotoThumbnail(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetPhotoThumbnail", ReplyAction="http://tempuri.org/IProductService/GetPhotoThumbnailResponse")]
        System.Threading.Tasks.Task<byte[]> GetPhotoThumbnailAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetLargePhoto", ReplyAction="http://tempuri.org/IProductService/GetLargePhotoResponse")]
        byte[] GetLargePhoto(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetLargePhoto", ReplyAction="http://tempuri.org/IProductService/GetLargePhotoResponse")]
        System.Threading.Tasks.Task<byte[]> GetLargePhotoAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductServiceChannel : Front.ProductServiceReference.IProductService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductServiceClient : System.ServiceModel.ClientBase<Front.ProductServiceReference.IProductService>, Front.ProductServiceReference.IProductService {
        
        public ProductServiceClient() {
        }
        
        public ProductServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Core.Models.ShortProductDTO[] GetShortProducts(int skip, int take) {
            return base.Channel.GetShortProducts(skip, take);
        }
        
        public System.Threading.Tasks.Task<Core.Models.ShortProductDTO[]> GetShortProductsAsync(int skip, int take) {
            return base.Channel.GetShortProductsAsync(skip, take);
        }
        
        public Core.Models.DetailProductDTO GetDetailProduct(int productID) {
            return base.Channel.GetDetailProduct(productID);
        }
        
        public System.Threading.Tasks.Task<Core.Models.DetailProductDTO> GetDetailProductAsync(int productID) {
            return base.Channel.GetDetailProductAsync(productID);
        }
        
        public int GetProductsCount() {
            return base.Channel.GetProductsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetProductsCountAsync() {
            return base.Channel.GetProductsCountAsync();
        }
        
        public byte[] GetPhotoThumbnail(int id) {
            return base.Channel.GetPhotoThumbnail(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPhotoThumbnailAsync(int id) {
            return base.Channel.GetPhotoThumbnailAsync(id);
        }
        
        public byte[] GetLargePhoto(int id) {
            return base.Channel.GetLargePhoto(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetLargePhotoAsync(int id) {
            return base.Channel.GetLargePhotoAsync(id);
        }
    }
}
