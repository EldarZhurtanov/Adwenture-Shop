//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Front.CartServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CartServiceReference.ICartService")]
    public interface ICartService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetCart", ReplyAction="http://tempuri.org/ICartService/GetCartResponse")]
        DataContracts.CartItemDTO[] GetCart(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/GetCart", ReplyAction="http://tempuri.org/ICartService/GetCartResponse")]
        System.Threading.Tasks.Task<DataContracts.CartItemDTO[]> GetCartAsync(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/Delete", ReplyAction="http://tempuri.org/ICartService/DeleteResponse")]
        void Delete(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/Delete", ReplyAction="http://tempuri.org/ICartService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/AddCartItem", ReplyAction="http://tempuri.org/ICartService/AddCartItemResponse")]
        void AddCartItem(string sessionID, int productID, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/AddCartItem", ReplyAction="http://tempuri.org/ICartService/AddCartItemResponse")]
        System.Threading.Tasks.Task AddCartItemAsync(string sessionID, int productID, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/ChangeCartItemQuantity", ReplyAction="http://tempuri.org/ICartService/ChangeCartItemQuantityResponse")]
        void ChangeCartItemQuantity(string sessionID, int productID, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICartService/ChangeCartItemQuantity", ReplyAction="http://tempuri.org/ICartService/ChangeCartItemQuantityResponse")]
        System.Threading.Tasks.Task ChangeCartItemQuantityAsync(string sessionID, int productID, int quantity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICartServiceChannel : Front.CartServiceReference.ICartService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CartServiceClient : System.ServiceModel.ClientBase<Front.CartServiceReference.ICartService>, Front.CartServiceReference.ICartService {
        
        public CartServiceClient() {
        }
        
        public CartServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CartServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CartServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CartServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataContracts.CartItemDTO[] GetCart(string sessionID) {
            return base.Channel.GetCart(sessionID);
        }
        
        public System.Threading.Tasks.Task<DataContracts.CartItemDTO[]> GetCartAsync(string sessionID) {
            return base.Channel.GetCartAsync(sessionID);
        }
        
        public void Delete(string sessionID) {
            base.Channel.Delete(sessionID);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string sessionID) {
            return base.Channel.DeleteAsync(sessionID);
        }
        
        public void AddCartItem(string sessionID, int productID, int quantity) {
            base.Channel.AddCartItem(sessionID, productID, quantity);
        }
        
        public System.Threading.Tasks.Task AddCartItemAsync(string sessionID, int productID, int quantity) {
            return base.Channel.AddCartItemAsync(sessionID, productID, quantity);
        }
        
        public void ChangeCartItemQuantity(string sessionID, int productID, int quantity) {
            base.Channel.ChangeCartItemQuantity(sessionID, productID, quantity);
        }
        
        public System.Threading.Tasks.Task ChangeCartItemQuantityAsync(string sessionID, int productID, int quantity) {
            return base.Channel.ChangeCartItemQuantityAsync(sessionID, productID, quantity);
        }
    }
}
